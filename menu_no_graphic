#!/bin/bash

function check_ip() {
if [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && \
 [[ $(echo $1 | awk -F. '{{for (i = 1; i <= NF; i++){if ($i >= 0 && $i <= 255) x+=1 }} {if (x == 4) print "good ip"}}') == 'good ip' ]] 
#&& [[ $(echo $1 | awk -F. '{if ($1 != 127) print "good ip"}') == 'good ip' ]]
	then
		echo $1
#		echo $(ipcalc $1 | grep Address: | tr -s ' ' | cut -d\  -f 2)
	else
		echo bad ip
fi
}


function convert_mask() {
MASK_TEMP=''
NEW_MASK=''
ZEROS=$(expr 32 - $1)
for (( i=1; i<=$1; i++ ))
do
MASK_TEMP=$(echo -e $MASK_TEMP'1')
done
for (( i=1; i<=$ZEROS; i++ ))
do
MASK_TEMP=$(echo -e $MASK_TEMP'0')
done
#echo $MASK_TEMP
for (( i=1; i<=4; i++ ))
do
NEW_MASK=$(echo "$NEW_MASK""$((2#$(echo $MASK_TEMP | head -c 8) )).")
MASK_TEMP=$(echo $MASK_TEMP | cut -c 9-)
#echo $MASK_TEMP
done
NEW_MASK=$(echo -n $NEW_MASK | head -c -1)
echo $NEW_MASK
}


function check_mask() {
if [[ $1 =~ ^([1-2]?[0-9]|[3][0-2])$ ]]
        then
		convert_mask $1
	elif [[ $1 =~ ^(254|252|248|240|224|192|128)\.0\.0\.0$ ]] || \
 		 [[ $1 =~ ^255\.(254|252|248|240|224|192|128|0)\.0\.0$ ]] || \
		 [[ $1 =~ ^255\.255\.(254|252|248|240|224|192|128|0)\.0$ ]] || \
		 [[ $1 =~ ^255\.255\.255\.(254|252|248|240|224|192|128|0)$ ]]
	then
                echo $1
        else
                echo bad mask
fi
}

############################# MENU ###################################
function menu() {
echo '   UnivefSLA Agent'
echo 1')' Show current config
echo 2')' Configuration network interfaces
echo 3')' Reset interfaces configuration
echo 4')' Reload agent

}

############# show all interfases on the aent ##############
function show_interfaces() {
INTERFACES=$(ip link | egrep '^[0-9]:' | cut -d ':' -f 2 | xargs echo)
INDEX=0
for i in $INTERFACES; do
	if [ "$i" != 'lo' ]; then
		INDEX=$(expr $INDEX + 1)
		eval "INTERFACE_$INDEX=$i";
	fi
done
for (( i=1; i<=$INDEX; i++ )); do
	echo -e -n $i')''\t'
	eval echo \$INTERFACE_$i;
done
}

##################################### configuration interface ################################
function conf_int() {
show_interfaces

while [ 1 ]; do
read -N 1 -s input
if show_interfaces | grep -q "${input})" && [[ ! -z $input ]] 
then
break
else
echo ERROR: Choice correct interface.
fi
done


INTERFACE_CONF=$(show_interfaces | egrep ^${input}')' | cut -d$'\t' -f 2)
clear
echo Configurations $INTERFACE_CONF
while [ 1 ]; do
echo Enter IP-address:
read new_ip

if [ "$(check_ip $new_ip)" != 'bad ip' ] 
then
echo ip: $new_ip
break
else
echo ERROR: Bad IP, please enter correctly IP
fi
done

while [ 1 ]; do
echo Enter Networt mask:
read new_mask
if [ "$(check_mask $new_mask)" != 'bad mask' ]
then
new_mask=$(check_mask $new_mask)
echo mask: $new_mask
break
else
echo ERROR: Bad mask, please enter correctly mask
fi
done

while [ 1 ]; do
echo Enter Gateway-address:
read new_gw
if [ "$(check_ip $new_gw)" != 'bad ip' ]
	then
		echo Gateway: $new_gw
		break
	else
		echo ERROR: Bad gateway, please enter correctly gateway
fi
done
clear
while [ 1 ]; do
echo --------------------
echo -e interface:'\t' ${INTERFACE_CONF}
echo -e address:'\t' ${new_ip}
echo -e gateway:'\t' ${new_gw}
echo -e netmask:'\t' ${new_mask}
echo --------------------
echo Write changes? '(Y/N)'
read i
if [ "$i" == 'Y' ] || [ "$i" == 'y' ] || [ "$i" == 'yes' ]; then
	cat > ${INTERFACE_CONF} << EOF
auto ${INTERFACE_CONF}
iface ${INTERFACE_CONF} inet static
address ${new_ip}
gateway ${new_gw}
netmask ${new_mask}
EOF
break
elif [ "$i" == 'N' ] || [ "$i" == 'n' ] || [ "$i" == 'no' ]; then
echo canseled changes.
break
fi
done
}


######################################## current_conf #########################################
function current_interfaces() {
show_interfaces &>/dev/null
for (( i=1; i<=$INDEX; i++ ))
do
if [ -f ./$(eval echo \$INTERFACE_$i) ]
then
eval echo ======= \$INTERFACE_$i =======
if cat ./$(eval echo \$INTERFACE_$i) | egrep -q '(gateway|address|netmask)'
then
cat ./$(eval echo \$INTERFACE_$i) | egrep '(gateway|address|netmask)'
echo
else

echo empty
echo
fi

else
eval echo ======= \$INTERFACE_$i =======
eval echo interfasce \$INTERFACE_$i not configurated
fi
done
}

function reset_conf() {
while [ 1 ]
do
echo Clear all interfaces configuration? '(Y/N)'
read i
if [ "$i" == 'Y' ] || [ "$i" == 'y' ] || [ "$i" == 'yes' ]; then
break
elif [ "$i" == 'N' ] || [ "$i" == 'n' ] || [ "$i" == 'no' ]; then
return 0
fi
done
INTERFACES=$(ip link | egrep '^[0-9]:' | cut -d ':' -f 2 | xargs echo)
INDEX=0
for i in $INTERFACES; do
        if [ "$i" != 'lo' ]; then
                INDEX=$(expr $INDEX + 1)
                eval "INTERFACE_$INDEX=$i";
        fi
done
for (( i=1; i<=$INDEX; i++ )); do
        if_name=$(eval echo \$INTERFACE_$i)
	cat > ./${if_name} << EOF
auto ${if_name}
iface ${if_name} inet static
EOF

echo Interface ${if_name} is claered.
done
echo OK!
cat > ./lo << EOF
source /etc/network/interfaces.d/*
auto lo
iface lo inet loopback
EOF
echo Interface lo is claered.
echo OK!

}

while [ 1 ]
do
clear
menu
read -N 1 -s var
case $var in
	1) 
	clear
	echo Current configurations:
 	current_interfaces
	read -N 1 -s none
	;;
	2) clear
	echo Choice one of active interfaces:
	conf_int
	if [[ $? == 101 ]]
	then
	clear
	else
	echo
	echo 'OK! Press any key to continue...'
	read -N 1 -s none
	fi
	;;
	3) clear
	echo
	reset_conf
	read -N 1 -s none
	;;
	4) echo Bye!
	exit 0
	;;
esac
done

